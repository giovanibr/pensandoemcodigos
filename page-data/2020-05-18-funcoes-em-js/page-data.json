{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-05-18-funcoes-em-js/","result":{"data":{"site":{"siteMetadata":{"title":"Pensando em Códigos"}},"markdownRemark":{"id":"3df6cf1f-e73b-5ca2-9a6e-9626ee077294","excerpt":"Em linguagens de programação, define-se uma entidade de primeira classe (first-class citizens) como a entidade em que é permitido realizar qualquer operação…","html":"<p>Em linguagens de programação, define-se uma entidade de primeira classe (<a href=\"https://en.wikipedia.org/wiki/First-class_citizen\">first-class citizens</a>) como a entidade em que é permitido realizar qualquer operação oferecida por aquela linguagem.</p>\n<p>Em Javascript, funções são entidades de primeira classe. </p>\n<!-- Com elas é possível: -->\n<p>Suponha a função declarada abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// declaração</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">minhaFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'minhaFn executou'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Em javascript é possível atribuí-la a uma variável, um atributo ou guardá-la em um array:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// atribuição</span>\n<span class=\"token keyword\">let</span> minhaVar <span class=\"token operator\">=</span> minhaFn<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// atribuindo a um atributo</span>\n<span class=\"token keyword\">let</span> meuObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> meuAtrib <span class=\"token operator\">:</span> minhaFn <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// declarando e colocando num array ao mesmo tempo</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'minhaFn executou'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Dessa forma, minhaFn pode ser executada tanto pelo nome original como pelas variáveis:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">minhaFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ou</span>\n<span class=\"token function\">minhaVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ou</span>\nmeuObj<span class=\"token punctuation\">.</span><span class=\"token function\">meuAtrib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> </p>\n<p>Em javascript também podemos passar uma função como parâmetro de outra função e também podemos retornar uma função como resposta:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">executaFuncao</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esse recurso é poderoso, e é por isso que conseguimos fazer coisas mais sofisticadas em javascript como no exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// array de pessoas</span>\n<span class=\"token keyword\">let</span> pessoas <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>nome<span class=\"token operator\">:</span> <span class=\"token string\">'Antônio'</span><span class=\"token punctuation\">,</span> idade<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>nome<span class=\"token operator\">:</span> <span class=\"token string\">'José'</span><span class=\"token punctuation\">,</span> idade<span class=\"token operator\">:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>nome<span class=\"token operator\">:</span> <span class=\"token string\">'Maria'</span><span class=\"token punctuation\">,</span> idade<span class=\"token operator\">:</span> <span class=\"token number\">38</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// define uma função de comparação</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">comparePor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            y <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ordena por nome usando a função retornada por comparePor()</span>\npessoas<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparePor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> </p>\n<p>Por último, podemos mencionar que podemos usar funções com operadores condicionais, como if por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> teste <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> </p>","frontmatter":{"title":"Funções em Javascript: entidades de primeira classe","date":"May 18, 2020","description":"Em Javascript, funções são entidades de primeira classe. O que são entidades de primeira classe? E o que isso significa na prática?"}}},"pageContext":{"slug":"/2020-05-18-funcoes-em-js/","previous":null,"next":null}}}