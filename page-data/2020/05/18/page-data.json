{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/05/18/","result":{"data":{"site":{"siteMetadata":{"title":"Pensando em Códigos"}},"markdownRemark":{"id":"1ee3a205-5d33-5edd-8d59-929ac63a7fe0","excerpt":"Em linguagens de programação, define-se uma entidade de primeira classe (first-class citizens) como a entidade em que é permitido realizar qualquer operação…","html":"<p>Em linguagens de programação, define-se uma entidade de primeira classe (<a href=\"https://en.wikipedia.org/wiki/First-class_citizen\" target=\"_blank\" rel=\"noopener noreferrer\">first-class citizens</a>) como a entidade em que é permitido realizar qualquer operação oferecida por aquela linguagem.</p>\n<p>Em Javascript, funções são entidades de primeira classe. </p>\n<!-- Com elas é possível: -->\n<p>Suponha a função declarada abaixo:</p>\n<pre><code class=\"language-javascript\">// declaração\nfunction minhaFn() {\n    console.log('minhaFn executou');\n}\n</code></pre>\n<p>Em javascript é possível atribuí-la a uma variável, um atributo ou guardá-la em um array:</p>\n<pre><code class=\"language-javascript\">// atribuição\nlet minhaVar = minhaFn;\n// atribuindo a um atributo\nlet meuObj = { meuAtrib : minhaFn }\n// declarando e colocando num array ao mesmo tempo\narr.push(function(){console.log('minhaFn executou');})\n</code></pre>\n<p>Dessa forma, minhaFn pode ser executada tanto pelo nome original como pelas variáveis:</p>\n<pre><code class=\"language-javascript\">minhaFn();\n// ou\nminhaVar();\n// ou\nmeuObj.meuAtrib();\n</code></pre>\n<p> </p>\n<p>Em javascript também podemos passar uma função como parâmetro de outra função e também podemos retornar uma função como resposta:</p>\n<pre><code class=\"language-javascript\">function executaFuncao(fn) {\n    fn();\n    return fn;\n}\n</code></pre>\n<p>Esse recurso é poderoso, e é por isso que conseguimos fazer coisas mais sofisticadas em javascript como no exemplo:</p>\n<pre><code class=\"language-javascript\">// array de pessoas\nlet pessoas = [\n    {nome: 'Antônio', idade: 25},\n    {nome: 'José', idade: 51},\n    {nome: 'Maria', idade: 38}\n];\n// define uma função de comparação\nfunction comparePor(prop) {\n    return function (a, b) {\n        let x = a[prop],\n            y = b[prop];\n        if (x > y) {\n            return 1;\n        } else if (x &#x3C; y) {\n            return -1\n        } else {\n            return 0;\n        }\n    }\n}\n// ordena por nome usando a função retornada por comparePor()\npessoas.sort(comparePor('nome'));\n</code></pre>\n<p> </p>\n<p>Por último, podemos mencionar que podemos usar funções com operadores condicionais, como if por exemplo:</p>\n<pre><code class=\"language-javascript\">let teste = (fn1() === fn2());\n</code></pre>\n<p> </p>","frontmatter":{"title":"Funções em Javascript: entidades de primeira classe","date":"18/05/20","description":"Em Javascript, funções são entidades de primeira classe. O que são entidades de primeira classe? E o que isso significa na prática?"}}},"pageContext":{"slug":"/2020/05/18/","previous":null,"next":{"fields":{"slug":"/2020/05/31/"},"frontmatter":{"title":"Implementando filas de tarefas com Bull"}}}}}