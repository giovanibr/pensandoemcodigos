{"version":3,"sources":["webpack:///./src/pages/readings.tsx"],"names":["BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","menuLinks","menu","style","marginLeft","rhythm","maxWidth","map","node","frontmatter","fields","slug","key","marginBottom","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"2FAAA,0HA4FeA,UAvDG,SAAC,GAAwC,IAAtCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SACnBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAC/BC,EAAYT,EAAKG,KAAKC,aAAaK,UAEzC,OACE,kBAAC,IAAD,CAAQR,SAAUA,EAAUI,MAAOH,EAAWQ,KAAMD,GAClD,kBAAC,IAAD,CAAKJ,MAAM,cAEX,yBACEM,MAAO,CACLC,WAAYC,YAAO,IACnBC,SAAUD,YAAO,MAInB,wCAEA,yDAC6B,oCAD7B,yDAODP,EAAMS,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACNX,EAAQW,EAAKC,YAAYZ,OAASW,EAAKE,OAAOC,KACpD,OACE,6BAASC,IAAKJ,EAAKE,OAAOC,KAAMR,MAAO,CAACC,WAAYC,YAAO,MACzD,gCACE,wBACEF,MAAO,CACLU,aAAcR,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMF,MAAO,CAAEW,UAAW,QAAUC,GAAIP,EAAKE,OAAOC,MACjDd,IAGL,+BAAQW,EAAKC,YAAYO,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQV,EAAKC,YAAYU,aAAeX,EAAKY,kBAaxD,IAAMC,EAAY","file":"component---src-pages-readings-tsx-71554c22a09c3cdcb687.js","sourcesContent":["// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n      menuLinks: {\n        name: string\n        link: string\n      }\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        frontmatter: {\n          title: string\n          date: string\n          description: string\n          category: string\n        }\n        fields: {\n          slug: string\n        }\n      }\n    }[]\n  }\n}\n\nconst BlogIndex = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  const menuLinks = data.site.siteMetadata.menuLinks\n\n  return (\n    <Layout location={location} title={siteTitle} menu={menuLinks}>\n      <SEO title=\"All posts\" />\n\n      <div\n        style={{\n          marginLeft: rhythm(.5),\n          maxWidth: rhythm(20)\n        }}\n      >\n\n        <h2>Leituras</h2>\n\n        <p>\n          Seman√°rio com os artigos e <i>posts</i> mais interessantes que eu me deparei pela internet.\n        </p>\n\n      </div>\n\n      \n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug} style={{marginLeft: rhythm(.5)}}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        frontmatter: {category: {eq: \"readings\"}}\n      },\n      sort: { \n        fields: [frontmatter___date], order: DESC \n      }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD/MM/YY\")\n            title\n            description\n            tags\n            category\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}